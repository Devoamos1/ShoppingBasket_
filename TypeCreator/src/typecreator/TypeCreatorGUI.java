/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package typecreator;

import com.jtattoo.plaf.mint.MintLookAndFeel;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import types.Dual;
import types.Effectiveness;
import types.PokemonTypes;
import types.Single;
import types.Single.Weaknesses;
import types.Type;
import types.Type.Strengths;

/**
 *
 * @author samsonaiyegbusi
 */
public class TypeCreatorGUI extends javax.swing.JFrame {

    private String[] types = new String[]{"Normal", "Fire", "Water", "Electricity",
        "Grass", "Ice", "Fighting", "Poison", "Ground", "Flying",
        "Psychic", "Bug", "Rock", "Ghost", "Dragon", "Dark", "Steel", "Fairy"};

    //column names for log table
    private Object[] wknColumnNames = {"Type", "Modifier"};
    //creates model for log table
    private DefaultTableModel wknModel = new DefaultTableModel(new Object[0][0], wknColumnNames) {

        //disables fields from being editable
        @Override
        public boolean isCellEditable(int row, int column) {
            return false; //To change body of generated methods, choose Tools | Templates.
        }
    };

    //column names for log table
    private Object[] strColumnNames = {"Type", "Modifier"};
    //creates model for log table
    private DefaultTableModel strModel = new DefaultTableModel(new Object[0][0], strColumnNames) {

        //disables fields from being editable
        @Override
        public boolean isCellEditable(int row, int column) {
            return false; //To change body of generated methods, choose Tools | Templates.
        }
    };

    /**
     * Creates new form TypeCreatorGUI
     */
    public TypeCreatorGUI() {
        initComponents();
        createSrc$FileFolder();
        populateCB();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        type1CB = new javax.swing.JComboBox();
        singleTB = new javax.swing.JToggleButton();
        type2CB = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        type2Lb = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        weaknessTable = new javax.swing.JTable();
        saveBT = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        strengthTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        strengthCB = new javax.swing.JComboBox();
        strongMultiplierCB = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        weaknessCB = new javax.swing.JComboBox();
        weakMultiplierCB = new javax.swing.JComboBox();
        addStrBtn = new javax.swing.JButton();
        addBtnWkn = new javax.swing.JButton();
        removeWknBT = new javax.swing.JButton();
        removeStrBT = new javax.swing.JButton();
        loadWknBt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        type1CB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                type1CBItemStateChanged(evt);
            }
        });

        singleTB.setText("Single");
        singleTB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleTBActionPerformed(evt);
            }
        });

        type2CB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                type2CBItemStateChanged(evt);
            }
        });
        type2CB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                type2CBActionPerformed(evt);
            }
        });

        jLabel1.setText("Type 1");

        type2Lb.setText("Type 2");

        jLabel3.setText("Weaknesses");

        weaknessTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(weaknessTable);

        saveBT.setText("Save");
        saveBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBTActionPerformed(evt);
            }
        });

        errorLabel.setText("Error message");

        jLabel4.setText("Strength");

        strengthTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(strengthTable);

        jLabel5.setText("Add Strength");

        strongMultiplierCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strongMultiplierCBActionPerformed(evt);
            }
        });

        jLabel6.setText("Add Weakness");

        weaknessCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weaknessCBActionPerformed(evt);
            }
        });

        weakMultiplierCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weakMultiplierCBActionPerformed(evt);
            }
        });

        addStrBtn.setText("Add Stre");
        addStrBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStrBtnActionPerformed(evt);
            }
        });

        addBtnWkn.setText("Add Wkn");
        addBtnWkn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnWknActionPerformed(evt);
            }
        });

        removeWknBT.setText("Remove Wkn");
        removeWknBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeWknBTActionPerformed(evt);
            }
        });

        removeStrBT.setText("Remove Str");
        removeStrBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeStrBTActionPerformed(evt);
            }
        });

        loadWknBt.setText("Load Wkn");
        loadWknBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadWknBtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(singleTB)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(type1CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(type2CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(type2Lb))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(errorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(saveBT)
                                    .addComponent(removeWknBT)
                                    .addComponent(removeStrBT)
                                    .addComponent(loadWknBt))
                                .addGap(0, 105, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(strengthCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(strongMultiplierCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(weaknessCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(weakMultiplierCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addBtnWkn)
                            .addComponent(addStrBtn))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(singleTB))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(strengthCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(strongMultiplierCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addStrBtn))
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(weakMultiplierCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6)
                                .addComponent(addBtnWkn)
                                .addComponent(weaknessCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(type2Lb)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(216, 216, 216))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(type1CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(type2CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(errorLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(saveBT)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(removeWknBT)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(removeStrBT)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(loadWknBt)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void singleTBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleTBActionPerformed
        // TODO add your handling code here:
        setupToggle();
    }//GEN-LAST:event_singleTBActionPerformed

    private void type2CBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_type2CBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_type2CBActionPerformed

    private void weaknessCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weaknessCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_weaknessCBActionPerformed

    private void saveBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBTActionPerformed
        // TODO add your handling code here:
        save();
    }//GEN-LAST:event_saveBTActionPerformed

    private void weakMultiplierCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weakMultiplierCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_weakMultiplierCBActionPerformed

    private void addBtnWknActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnWknActionPerformed
        // TODO add your handling code here:

        String type = weaknessCB.getSelectedItem().toString();
        double multiplier = Double.parseDouble(weakMultiplierCB.getSelectedItem().toString());
        
        addWeakness(type, multiplier);
    }//GEN-LAST:event_addBtnWknActionPerformed

    private void type1CBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_type1CBItemStateChanged
        // TODO add your handling code here:

        //clear tables
        clearTables();
    }//GEN-LAST:event_type1CBItemStateChanged

    private void addStrBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStrBtnActionPerformed
        // TODO add your handling code here:
        addStrength();
    }//GEN-LAST:event_addStrBtnActionPerformed

    private void strongMultiplierCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strongMultiplierCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_strongMultiplierCBActionPerformed

    private void removeWknBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeWknBTActionPerformed
        // TODO add your handling code here:
        int selectedRow = weaknessTable.getSelectedRow();
        wknModel.removeRow(selectedRow);
        weaknessTable.setModel(wknModel);
    }//GEN-LAST:event_removeWknBTActionPerformed

    private void removeStrBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeStrBTActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = strengthTable.getSelectedRow();
        strModel.removeRow(selectedRow);
        strengthTable.setModel(strModel);
        
    }//GEN-LAST:event_removeStrBTActionPerformed

    private void loadWknBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadWknBtActionPerformed
        // TODO add your handling code here:
        
        String type1 = type1CB.getSelectedItem().toString();
        
        String type2 = type2CB.getSelectedItem().toString();
        
        dualTypeIdentifier(type1, type2);
    }//GEN-LAST:event_loadWknBtActionPerformed

    private void type2CBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_type2CBItemStateChanged
        // TODO add your handling code here:
        clearTables();
    }//GEN-LAST:event_type2CBItemStateChanged

    private void addStrength() {

        String type = strengthCB.getSelectedItem().toString();
        double multiplier = Double.parseDouble(strongMultiplierCB.getSelectedItem().toString());

        Object[] o = new Object[2];

        o[0] = type;
        o[1] = multiplier;

        strModel.addRow(o);

        strengthTable.setModel(strModel);
    
    }

    private void addWeakness(String type, double multiplier) {

        

        Object[] o = new Object[2];

        o[0] = type;
        o[1] = multiplier;

        wknModel.addRow(o);

        weaknessTable.setModel(wknModel);

    }

    public void clearTables() {
        //empties table
        wknModel.setRowCount(0);
        strModel.setRowCount(0);
    }

    private void setupToggle() {

        if (singleTB.isSelected() == true) {
            singleTB.setText("Dual");
            type2CB.setVisible(true);
            type2Lb.setVisible(true);

        } else {
            singleTB.setText("Single");
            type2CB.setVisible(false);
            type2Lb.setVisible(false);
            type2CB.setSelectedIndex(0);
            
        }

    }

    //creates an xml file in the Files package
    public void createNewTypeFile() {
        List<String> lines = Arrays.asList("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>", "<SingleType xmlns=\'http://types'>", "</SingleType>");

        Path file = Paths.get(System.getProperty("user.home") + "/BattleSimulator/types.xml");
        try {
            Files.write(file, lines, Charset.forName("UTF-8"));
        } catch (IOException ex) {
            Logger.getLogger(TypeCreatorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void createSrc$FileFolder() {

        //checks if the src & files folder exist & if not then create them
        Path srcpath = Paths.get(System.getProperty("user.home") + "/BattleSimulator");

        //if directory exists?
        if (!Files.exists(srcpath)) {
            try {
                Files.createDirectories(srcpath);
                createNewTypeFile();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private void populateCB() {

        
        type2CB.setVisible(false);
        type2Lb.setVisible(false);

        List<String> cbTypes = Arrays.asList(types);

        Double[] modifierValues = new Double[]{0.0, 0.25, 0.5, 1.0, 2.0, 4.0};

        List<Double> typeModifiers = Arrays.asList(modifierValues);

        type2CB.addItem("Default");
        for (String type : cbTypes) {
            type1CB.addItem(type);
            type2CB.addItem(type);
            strengthCB.addItem(type);
            weaknessCB.addItem(type);
        }

        for (Double modifier : typeModifiers) {
            strongMultiplierCB.addItem(modifier);
            weakMultiplierCB.addItem(modifier);
        }

    }
    
    private void save(){
        
      List<Effectiveness> wknEffectiveness = getWknEffectiveness();
      List<Effectiveness> strEffectiveness = getStrEffectiveness();
      
      String type1 = type1CB.getSelectedItem().toString();
      String type2 = type2CB.getSelectedItem().toString();
      
      if (!type2.equalsIgnoreCase("Default")){
          newType(false, strEffectiveness, wknEffectiveness, new String[]{type1, type2});
                errorLabel.setText("Added Type:"+ type1  + " " +type2);

      } else {
          newType(true, strEffectiveness, wknEffectiveness, new String[]{type1});
          errorLabel.setText("Added Type:"+ type1);
      }
      
        
    }
    
    private void dualTypeIdentifier(String type1, String type2){
        
        
       List<Single> singleList = retrieveSingleTypes();
       
       Single single1 = null;
       Single single2 = null;
       
       for (Single single: singleList)
       {
           
           if(single.getType1().getName().equalsIgnoreCase(type1))
           {
               single1 = single;
           } else if(single.getType1().getName().equalsIgnoreCase(type2))
           {
               single2 = single;
           }
           
           
       }
       
       List<String> types = Arrays.asList(this.types);
       
       for (String type : types)
       {
           double single1Dmg = single1.getWeaknesses().getEffectivenessDamage(type);
           double single2Dmg = single2.getWeaknesses().getEffectivenessDamage(type);
        double multiplier = single1Dmg * single2Dmg;
        Object[] o = new Object[2];

        o[0] = type;
        o[1] = multiplier;

        wknModel.addRow(o);

        weaknessTable.setModel(wknModel);
           
       }
       
       
        
    }
    
    public List<Effectiveness> getWknEffectiveness(){
        
        int nRow = weaknessTable.getRowCount(), nCol = weaknessTable.getColumnCount();
        
        List<Effectiveness> weaknesses = new ArrayList();
        
        Effectiveness effectiveness = null;
        
        for (int i = 0 ; i < nRow ; i++){
           for (int j = 0 ; j < nCol ; j++){
 
            if (j == 0){
                
                effectiveness = new Effectiveness();
                String type = weaknessTable.getValueAt(i, j).toString();
                effectiveness.setType(type);
                
            }else{
                double damage = Double.parseDouble(weaknessTable.getValueAt(i, j).toString());
                effectiveness.setDamage(damage);
                
                weaknesses.add(effectiveness);
                
            }
            
        } 
        }
        
            return weaknesses;
        
    }
    
    public List<Effectiveness> getStrEffectiveness(){
        
        int nRow = strengthTable.getRowCount(), nCol = strengthTable.getColumnCount();
        
        List<Effectiveness> strength = new ArrayList();
        
        Effectiveness effectiveness = null;
        
        for (int i = 0 ; i < nRow ; i++){
           for (int j = 0 ; j < nCol ; j++){
 
            if (j == 0){
                
                effectiveness = new Effectiveness();
                String type = strengthTable.getValueAt(i, j).toString();
                effectiveness.setType(type);
                
            }else{
                double damage = Double.parseDouble(strengthTable.getValueAt(i, j).toString());
                effectiveness.setDamage(damage);
                
                strength.add(effectiveness);
                
            }
            
        } 
        }
        
            return strength;
        
    }
      
//Marshals unknown error from application into known error xml file
    public void newType(boolean isSingle, List<Effectiveness> strEffectiveness, List<Effectiveness> wknEffectiveness, String... type) {
        PokemonTypes pokemonTypes = retrievePokemonTypes();
        
        List<Single> existingSingles = pokemonTypes.getSingleTypes().getSingleType();
        
        List<Dual>  existingDuals = pokemonTypes.getDualTypes().getDualType();

        
        
        //checks if any errors exist in the known error xml file so that those errors can be added back into 
        //a new list of errors containing additions to be added back to the xml file
        
        if (isSingle == true){            
            newSingle(type[0], strEffectiveness, wknEffectiveness, existingSingles, existingDuals, pokemonTypes);   
        }else{            
             newDual( wknEffectiveness, existingSingles, existingDuals, pokemonTypes, type);
            
        }
        }
    
    //unmarshals data from known errors xml file
    public static List<Single> retrieveSingleTypes() {
        PokemonTypes pokemonTypes = new PokemonTypes();
        //unmarshaller
        try {
            javax.xml.bind.JAXBContext jaxbCtx = javax.xml.bind.JAXBContext.newInstance(pokemonTypes.getClass().getPackage().getName());
            javax.xml.bind.Unmarshaller unmarshaller = jaxbCtx.createUnmarshaller();
            pokemonTypes = (PokemonTypes) unmarshaller.unmarshal(new java.io.File(System.getProperty("user.home") + "/BattleSimulator/types.xml")); //NOI18N
            return pokemonTypes.getSingleTypes().getSingleType();
             

        } catch (javax.xml.bind.JAXBException ex) {
            System.out.println(ex);
        }
        return null;
    }
    
    //unmarshals data from known errors xml file
    public static PokemonTypes retrievePokemonTypes() {
        PokemonTypes pokemonTypes = new PokemonTypes();
        //unmarshaller
        try {
            javax.xml.bind.JAXBContext jaxbCtx = javax.xml.bind.JAXBContext.newInstance(pokemonTypes.getClass().getPackage().getName());
            javax.xml.bind.Unmarshaller unmarshaller = jaxbCtx.createUnmarshaller();
            pokemonTypes = (PokemonTypes) unmarshaller.unmarshal(new java.io.File(System.getProperty("user.home") + "/BattleSimulator/types.xml")); //NOI18N
            return pokemonTypes;

        } catch (javax.xml.bind.JAXBException ex) {
            System.out.println(ex);
        }
        return null;
    }
    
    //unmarshals data from known errors xml file
    public static List<Dual> retrieveDualTypes() {
        PokemonTypes pokemonTypes = new PokemonTypes();
        //unmarshaller
        try {
            javax.xml.bind.JAXBContext jaxbCtx = javax.xml.bind.JAXBContext.newInstance(pokemonTypes.getClass().getPackage().getName());
            javax.xml.bind.Unmarshaller unmarshaller = jaxbCtx.createUnmarshaller();
            pokemonTypes = (PokemonTypes) unmarshaller.unmarshal(new java.io.File(System.getProperty("user.home") + "/BattleSimulator/types.xml")); //NOI18N
            return pokemonTypes.getDualTypes().getDualType();

        } catch (javax.xml.bind.JAXBException ex) {
            System.out.println(ex);
        }
        return null;
    }
    
    private void newDual(  List<Effectiveness> wknEffectiveness, List<Single> existingSingles, 
                           List<Dual> existingDuals, PokemonTypes pokemonTypes, String... name){
        
        
         Dual dual = new Dual();
           Dual dual2 = new Dual();    
            
            if (existingDuals != null) {                   
              
               //set type
               types.Type type1 = new types.Type();
               types.Type type2 = new types.Type();

               type1.setName(name[0]);
               type2.setName(name[1]);

               //set weakness for single
               
               types.Dual.Weaknesses weaknesses = new types.Dual.Weaknesses();
               
               weaknesses.getWeakness().addAll(wknEffectiveness);
               
               dual.setWeaknesses(weaknesses);
               dual2.setWeaknesses(weaknesses);
               
               // set type for single
               dual.setType1(type1);
               dual.setType2(type2);
               
               dual2.setType1(type2);
               dual2.setType2(type1);
               
               existingDuals.add(dual);
               
               existingDuals.add(dual2);

            } else {

             //set type
               types.Type type1 = new types.Type();
               types.Type type2 = new types.Type();

               type1.setName(name[0]);
               type2.setName(name[1]);

               //set weakness for single
               
               types.Dual.Weaknesses weaknesses = new types.Dual.Weaknesses();
               
               weaknesses.getWeakness().addAll(wknEffectiveness);
               
               dual.setWeaknesses(weaknesses);
               dual2.setWeaknesses(weaknesses);
               
               // set type for single
               dual.setType1(type1);
               dual.setType2(type2);
               
               dual2.setType1(type2);
               dual2.setType2(type1);
               
               existingDuals.add(dual);
               
               existingDuals.add(dual2);   
               
        }
            pokemonTypes.getSingleTypes().setSingleType(existingSingles);
            pokemonTypes.getDualTypes().setDualType(existingDuals);
            
        //Marshaller
            try {
                OutputStream os = new FileOutputStream(System.getProperty("user.home") + "/BattleSimulator/types.xml");
                javax.xml.bind.JAXBContext jaxbCtx = javax.xml.bind.JAXBContext.newInstance(dual.getClass().getPackage().getName());
                javax.xml.bind.Marshaller marshaller = jaxbCtx.createMarshaller();           //^^^^^^^^^^
                marshaller.setProperty(javax.xml.bind.Marshaller.JAXB_ENCODING, "UTF-8"); //NOI18N
                marshaller.setProperty(javax.xml.bind.Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
                marshaller.marshal(pokemonTypes, os);
                                   //^^^^^^^^^^s
            } catch (javax.xml.bind.JAXBException ex) {
                // XXXTODO Handle exception
                System.out.print(ex); //NOI18N
                       
            } catch (FileNotFoundException ex) {
            Logger.getLogger(TypeCreatorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    
    
        
        
    }

    
    private void newSingle(String name, List<Effectiveness> strEffectiveness, List<Effectiveness> wknEffectiveness, List<Single> existingSingles, 
                           List<Dual> existingDuals, PokemonTypes pokemonTypes){
    
     Single single = new Single();
               
            
            if (existingSingles != null) {                   
               //set type
               types.Type type = new types.Type();
               
               type.setName(name);
               
               //set strength for type
               Strengths strength = new Strengths();
               
               strength.getStrength().addAll(strEffectiveness);
               
               type.setStrengths(strength);
               
               //set weakness for single
               
               Weaknesses weaknesses = new Weaknesses();
               
               weaknesses.getWeakness().addAll(wknEffectiveness);
               
               single.setWeaknesses(weaknesses);
               
               // set type for single
               single.setType1(type);
               
               existingSingles.add(single);
            
             } else {
               
               
               //set type
               types.Type type = new types.Type();
               
               type.setName(name);
               
               //set strength for type
               Strengths strength = new Strengths();
               
               strength.getStrength().addAll(strEffectiveness);
               
               type.setStrengths(strength);
               
               //set weakness for single
               
               Weaknesses weaknesses = new Weaknesses();
               
               weaknesses.getWeakness().addAll(wknEffectiveness);
               
               single.setWeaknesses(weaknesses);
               
               // set type for single
               single.setType1(type);
               
               existingSingles.add(single);    
               
        }
            pokemonTypes.getSingleTypes().setSingleType(existingSingles);
            pokemonTypes.getDualTypes().setDualType(existingDuals);
            
        //Marshaller
            try {
                OutputStream os = new FileOutputStream(System.getProperty("user.home") + "/BattleSimulator/types.xml");
                javax.xml.bind.JAXBContext jaxbCtx = javax.xml.bind.JAXBContext.newInstance(single.getClass().getPackage().getName());
                javax.xml.bind.Marshaller marshaller = jaxbCtx.createMarshaller();           //^^^^^^^^^^
                marshaller.setProperty(javax.xml.bind.Marshaller.JAXB_ENCODING, "UTF-8"); //NOI18N
                marshaller.setProperty(javax.xml.bind.Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
                marshaller.marshal(pokemonTypes, os);
                                   //^^^^^^^^^^s
            } catch (javax.xml.bind.JAXBException ex) {
                // XXXTODO Handle exception
                System.out.print(ex); //NOI18N
                       
            } catch (FileNotFoundException ex) {
            Logger.getLogger(TypeCreatorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    
    
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TypeCreatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TypeCreatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TypeCreatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TypeCreatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                try {

                    Properties props = new Properties();
                    props.put("logoString", "");
                    MintLookAndFeel.setCurrentTheme(props);
                    UIManager.setLookAndFeel(new MintLookAndFeel());

                    TypeCreatorGUI frame = new TypeCreatorGUI();
                    frame.pack();
                    frame.setVisible(true);
                } catch (Exception e) {
                    System.out.println(e);
                }
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtnWkn;
    private javax.swing.JButton addStrBtn;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton loadWknBt;
    private javax.swing.JButton removeStrBT;
    private javax.swing.JButton removeWknBT;
    private javax.swing.JButton saveBT;
    private javax.swing.JToggleButton singleTB;
    private javax.swing.JComboBox strengthCB;
    private javax.swing.JTable strengthTable;
    private javax.swing.JComboBox strongMultiplierCB;
    private javax.swing.JComboBox type1CB;
    private javax.swing.JComboBox type2CB;
    private javax.swing.JLabel type2Lb;
    private javax.swing.JComboBox weakMultiplierCB;
    private javax.swing.JComboBox weaknessCB;
    private javax.swing.JTable weaknessTable;
    // End of variables declaration//GEN-END:variables
}
